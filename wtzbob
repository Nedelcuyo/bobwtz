getgenv().Settings = {
    AutoBuyDice = false,
    UiEnabled = false,
    Roll = {
        Enable = false,
        Invisible = false,
    },
    Dice = {
        ["Lucky Dice"] = {Craft = false, Use = false, Only_Use_If_Not_Active = false, Roll_On_Boost = false},
        ["Lucky Dice II"] = {Craft = false, Use = false, Only_Use_If_Not_Active = false, Roll_On_Boost = false},
        ["Lucky Dice III"] = {Craft = false, Use = false, Only_Use_If_Not_Active = false, Roll_On_Boost = false},
        ["Mega Lucky Dice"] = {Craft = false, Use = false, Only_Use_If_Not_Active = false, Roll_On_Boost = false},
        ["Mega Lucky Dice II"] = {Craft = false, Use = false, Only_Use_If_Not_Active = false, Roll_On_Boost = false},
    },
    Webhook = {
        DiscordID = "",
        Link = "",
        ShowRobloxUsername = false,
    },
    Upgrades = {
        EggLuck = false,
        HatchSpeed = false,
        BonusLuck = false,
        ExtraEgg = false,
        HugeLuck = false,
    },
    Misc = {
        FpsBoost = false,
        AntiAfk = false,
    },
    AutoMail = {
        Enabled = false, 
        MailToUser = "", 
    }
}
--[[ Wait for game to load ]]--
repeat task.wait() until game:IsLoaded() 
repeat task.wait() until game:GetService("Players").LocalPlayer
repeat task.wait() until not game.Players.LocalPlayer.PlayerGui:FindFirstChild("__INTRO")
repeat game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.__THINGS.Instances.RngInstance.Teleports.Enter.CFrame until  game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame == workspace.__THINGS.Instances.RngInstance.Teleports.Enter.CFrame
repeat task.wait() until game:GetService("ReplicatedStorage").Network
repeat task.wait() until game:GetService("ReplicatedStorage").Network["Items: Update"]

--[[ Needed Local Variables ]]--
local StartTime = os.time();
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Network = ReplicatedStorage:WaitForChild("Network")
local OrbFolder = game:GetService("Workspace").__THINGS:FindFirstChild("Orbs")
local Breakables = Workspace['__THINGS'].Breakables
local RunService = game:GetService("RunService")
local useddice = 0

function GetKey(keyName)
    for i, v in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Misc) do
        if v.id == keyName then
            return v._am or false
        end
    end
    return 0
end

local function RequestWebhook(WebUrl, Body) 
    pcall(function()
        local response = request({
            Url = WebUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = Body
        })
    end)
end

function GetAssetID(PetName, PetType)
    if require(game.ReplicatedStorage.Library.Directory.Pets)[PetName] then
        if PetType == 1 then
            PetAssetID = require(game.ReplicatedStorage.Library.Directory.Pets)[PetName].goldenThumbnail
        else
            PetAssetID = require(game.ReplicatedStorage.Library.Directory.Pets)[PetName].thumbnail
        end
    end
    return string.gsub(PetAssetID, "rbxassetid://", "")
end

local PetsUidTable = {}
for i,v in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
    for i2,v2 in pairs(v) do
        if type(v2) == "string" then
            if string.find(v2, "Huge") then
                
                table.insert(PetsUidTable, i)
            end
        end
    end
end

if Settings.AutoMail.Enabled and Settings.AutoMail.MailToUser ~= "" then
    task.wait(10)
    local HugeUIDList = {}
    for PetUID, PetData in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Pet) do
        if PetData.id:find("Huge ") then
            table.insert(HugeUIDList, PetUID)
            if PetData.lk then
                repeat
                    task.wait()
                until Network.Invoke("Locking_SetLocked", PetUID, false)
                print("Unlocked", PetUID)
            end
        end
    end

    for _, PetUID in pairs(HugeUIDList) do
        repeat
            task.wait()
        until Network.Invoke("Mailbox: Send", Settings.AutoMail.MailToUser, tostring(Random.new():NextInteger(9, 999999)), "Pet", PetUID, 1)
        print("Sent", PetUID)
    end
end


--[[ Huge Webhook ]]--
game:GetService("ReplicatedStorage").Network["Items: Update"].OnClientEvent:Connect(function(player, a, b)
    if a["set"] then
        if a["set"]["Pet"] then
            for i, v in pairs(a["set"]["Pet"]) do
                if v.id:match("Huge") and not PetsUidTable[i] then
                    TitleA = ""
                    if v.pt == 1 then
                        TitleA = "Golden "
                    elseif v.pt == 2 then
                        TitleA = "Rainbow "
                    end
                    if v.sh then
                        TitleA = "Shiny " .. TitleA
                    end
                    print("-- You hatched a " .. TitleA .. v.id .. " --")
                    TitleA = "Obtained a " .. TitleA .. v.id
                    if Settings.Webhook.DiscordID and Settings.Webhook.DiscordID ~= "" then
                        content = "<@" .. tostring(Settings.Webhook.DiscordID) .. ">"
                    else
                        content = ""
                    end
                    if GetAssetID(v.id, v.pt) then
                        thumbnailURL = "https://biggamesapi.io/image/" .. GetAssetID(v.id, v.pt)
                    else
                        thumbnailURL = "https://i.imgur.com/DT4h2VX.png"
                    end
                    if Settings.Webhook.ShowRobloxUsername then
                        TitleA = game.Players.LocalPlayer.Name .. " " .. TitleA
                    end
                    local message1 = {
                        content = content,
                        embeds = {
                            {
                                title = TitleA,
                                color = 0xFF00FF,
                                timestamp = DateTime.now():ToIsoDate(),
                                thumbnail = {
                                    url = thumbnailURL,
                                },
                                footer = {
                                    text = "bob&wattz"
                                }
                            }
                        }
                    }
                    jsonMessage = game:GetService("HttpService"):JSONEncode(message1)
                    RequestWebhook(Settings.Webhook.Link, jsonMessage)
                    ChangeText("Huge",TitleA)
                    table.insert(PetsUidTable, i)
                end
            end
        end
    end
end)

--[[ FPS Booster ]]--

local function Optimize(Part)
    pcall(function()
        if not Workspace[game.Players.LocalPlayer.Name]:FindFirstChild(Part.Name) then
            if Part:IsA("BasePart") and not Part:IsA("MeshPart") then
                Part.Material = Enum.Material.Plastic
                Part.Reflectance = 0
            elseif Part:IsA("ParticleEmitter") or Part:IsA("Trail") then
                Part.Lifetime = NumberRange.new(0)
            elseif Part:IsA("Explosion") then
                Part.BlastPressure = 1
                Part.BlastRadius = 1
            elseif Part:IsA("Fire") or Part:IsA("SpotLight") or Part:IsA("Smoke") or Part:IsA("Sparkles") then
                Part.Enabled = false
            elseif Part:IsA("MeshPart") then
                Part.Material = Enum.Material.Plastic
                Part.Reflectance = 0
                Part.TextureID = ""
            elseif Part:IsA("SpecialMesh") then
                Part.TextureId = ""
            elseif Part:IsA("ShirtGraphic") then
                Part.Graphic = ""
            elseif Part:IsA("Shirt") or Part:IsA("Pants") then
                Part[Part.ClassName .. "Template"] = ""
            end
            pcall(function()
                Part.TextureID = ""
            end)
            pcall(function()
                Part.Transparency = 1
            end)
        end
    end)
end

if Settings.Misc.FpsBoost then
   task.spawn(function()
    while task.wait() do
        for _, DestroyDebris in pairs(Workspace.__DEBRIS:GetChildren()) do
            if DestroyDebris.ClassName == "Part" or DestroyDebris.Name == "Explosion FX" then
                DestroyDebris:Destroy()
            end
        end
    end
end)

-- Adding 3-second delay before continuing with the next section
task.wait(3)

Breakables = Workspace.__THINGS.Breakables
Breakables.Parent = game.ReplicatedStorage

-- Adding 3-second delay
task.wait(3)

OrbFolder = Workspace.__THINGS.Orbs
OrbFolder.Parent = game.ReplicatedStorage

-- Adding 3-second delay
task.wait(3)

local DestroyPaths = {"Ornaments", "BalloonGifts"}
for m, DestroyPath in ipairs(DestroyPaths) do
    local DestroyPath = workspace.__THINGS:FindFirstChild(DestroyPath)
    if DestroyPath then
        DestroyPath:Destroy()
    end
end

-- Adding 3-second delay
task.wait(3)

for _, WorkspaceDesc in pairs(Workspace:GetDescendants()) do
    pcall(function()
        WorkspaceDesc.Transparency = 1
    end)
end

-- Adding 3-second delay
task.wait(3)

local DestroyPaths2 = {"Summer 2023", "Outer", "Tycoon Map"}
for o, DestroyPathw in ipairs(DestroyPaths2) do
    local DestroyPathw = Workspace:FindFirstChild(DestroyPathw)
    if DestroyPathw then
        DestroyPathw:Destroy()
    end
end

-- Adding 3-second delay
task.wait(3)

for _, v in pairs(Workspace:GetDescendants()) do
    Optimize(v)
end

Workspace.DescendantAdded:Connect(Optimize)
end

--[[ SSOL Base UI ]]--
local SSOL_UI = {};

SSOL_UI["1"] = Instance.new("ScreenGui", game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui"));
SSOL_UI["1"]["Name"] = "SSol";
SSOL_UI["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;

SSOL_UI["2"] = Instance.new("Frame", SSOL_UI["1"]);
SSOL_UI["2"]["BorderSizePixel"] = 0;
SSOL_UI["2"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 5);
SSOL_UI["2"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["2"]["BackgroundTransparency"] = 1;
SSOL_UI["2"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["2"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["2"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
SSOL_UI["2"]["Name"] = "Holder";

SSOL_UI["3"] = Instance.new("Frame", SSOL_UI["2"]);
SSOL_UI["3"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["3"]["Size"] = UDim2.new(1, 0, 0.1666666666666667, 0);
SSOL_UI["3"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["3"]["Position"] = UDim2.new(0, 0, 0.19499999284744263, 0);
SSOL_UI["3"]["Name"] = "Rolls-Frame";

SSOL_UI["4"] = Instance.new("TextLabel", SSOL_UI["3"]);
SSOL_UI["4"]["TextWrapped"] = true;
SSOL_UI["4"]["BorderSizePixel"] = 0;
SSOL_UI["4"]["TextScaled"] = true;
SSOL_UI["4"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["4"]["TextSize"] = 14;
SSOL_UI["4"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["4"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["4"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["4"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["4"]["Text"] = "Current Rolls: 1";
SSOL_UI["4"]["Font"] = Enum.Font.SourceSansBold;
SSOL_UI["4"]["BackgroundTransparency"] = 1;
SSOL_UI["4"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

SSOL_UI["5"] = Instance.new("Frame", SSOL_UI["2"]);
SSOL_UI["5"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["5"]["Size"] = UDim2.new(1, 0, 0.1666666666666667, 0);
SSOL_UI["5"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["5"]["Position"] = UDim2.new(0, 0, 0.1265895962715149, 0);
SSOL_UI["5"]["Name"] = "Time-Frame";

SSOL_UI["6"] = Instance.new("TextLabel", SSOL_UI["5"]);
SSOL_UI["6"]["TextWrapped"] = true;
SSOL_UI["6"]["BorderSizePixel"] = 0;
SSOL_UI["6"]["TextScaled"] = true;
SSOL_UI["6"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["6"]["TextSize"] = 14;
SSOL_UI["6"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["6"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["6"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["6"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["6"]["Text"] = "Run Time:  00:00:00";
SSOL_UI["6"]["Font"] = Enum.Font.SourceSansBold;
SSOL_UI["6"]["BackgroundTransparency"] = 1;
SSOL_UI["6"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

SSOL_UI["7"] = Instance.new("Frame", SSOL_UI["2"]);
SSOL_UI["7"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["7"]["Size"] = UDim2.new(1, 0, 0.1666666666666667, 0);
SSOL_UI["7"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["7"]["Position"] = UDim2.new(0, 0, 0.3319999873638153, 0);
SSOL_UI["7"]["Name"] = "Titanic-Frame";

SSOL_UI["8"] = Instance.new("TextLabel", SSOL_UI["7"]);
SSOL_UI["8"]["TextWrapped"] = true;
SSOL_UI["8"]["BorderSizePixel"] = 0;
SSOL_UI["8"]["TextScaled"] = true;
SSOL_UI["8"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["8"]["TextSize"] = 14;
SSOL_UI["8"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["8"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["8"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["8"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["8"]["Text"] = "RNG Coins: 0";
SSOL_UI["8"]["Font"] = Enum.Font.SourceSansBold;
SSOL_UI["8"]["BackgroundTransparency"] = 1;
SSOL_UI["8"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

SSOL_UI["9"] = Instance.new("Frame", SSOL_UI["2"]);
SSOL_UI["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["9"]["Size"] = UDim2.new(1, 0, 0.1666666666666667, 0);
SSOL_UI["9"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["9"]["Position"] = UDim2.new(0, 0, 0.4000000059604645, 0);
SSOL_UI["9"]["Name"] = "Mastery-Frame";

SSOL_UI["a"] = Instance.new("TextLabel", SSOL_UI["9"]);
SSOL_UI["a"]["TextWrapped"] = true;
SSOL_UI["a"]["BorderSizePixel"] = 0;
SSOL_UI["a"]["TextScaled"] = true;
SSOL_UI["a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["a"]["TextSize"] = 14;
SSOL_UI["a"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["a"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["a"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["a"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["a"]["Text"] = "Mastery Level: bobisgay";
SSOL_UI["a"]["Font"] = Enum.Font.SourceSansBold;
SSOL_UI["a"]["BackgroundTransparency"] = 1;
SSOL_UI["a"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

SSOL_UI["b"] = Instance.new("Frame", SSOL_UI["2"]);
SSOL_UI["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["b"]["Size"] = UDim2.new(1, 0, 0.1666666666666667, 0);
SSOL_UI["b"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["b"]["Position"] = UDim2.new(0, 0, 0.2639999985694885, 0);
SSOL_UI["b"]["Name"] = "Huges-Frame";

SSOL_UI["c"] = Instance.new("TextLabel", SSOL_UI["b"]);
SSOL_UI["c"]["TextWrapped"] = true;
SSOL_UI["c"]["BorderSizePixel"] = 0;
SSOL_UI["c"]["TextScaled"] = true;
SSOL_UI["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["c"]["TextSize"] = 14;
SSOL_UI["c"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["c"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["c"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["c"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["c"]["Text"] = "Huges Hatched: 0";
SSOL_UI["c"]["Font"] = Enum.Font.SourceSansBold;
SSOL_UI["c"]["BackgroundTransparency"] = 1;
SSOL_UI["c"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

SSOL_UI["d"] = Instance.new("Frame", SSOL_UI["2"]);
SSOL_UI["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["d"]["Size"] = UDim2.new(1, 0, 0.1666666666666667, 0);
SSOL_UI["d"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["d"]["Position"] = UDim2.new(0, 0, 0.2639999985694885, 0);
SSOL_UI["d"]["Name"] = "Dice-Frame";

SSOL_UI["e"] = Instance.new("TextLabel", SSOL_UI["d"]);
SSOL_UI["e"]["TextWrapped"] = true;
SSOL_UI["e"]["BorderSizePixel"] = 0;
SSOL_UI["e"]["TextScaled"] = true;
SSOL_UI["e"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
SSOL_UI["e"]["TextSize"] = 14;
SSOL_UI["e"]["TextColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["e"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
SSOL_UI["e"]["Size"] = UDim2.new(1, 0, 1, 0);
SSOL_UI["e"]["BorderColor3"] = Color3.fromRGB(0, 0, 0);
SSOL_UI["e"]["Text"] = "Mega Dice II Used: 0";
SSOL_UI["e"]["Font"] = Enum.Font.SourceSansBold;
SSOL_UI["e"]["BackgroundTransparency"] = 1;
SSOL_UI["e"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

SSOL_UI["f"] = Instance.new("UIListLayout", SSOL_UI["2"]);
SSOL_UI["f"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

--[[ Needed Functions ]]--
function FormatTime(time)
    local hours = math.floor(time / 3600)
    time = time % 3600
    local minutes = math.floor(time / 60)
    time = time % 60
    return string.format("%02d:%02d:%02d", hours, minutes, time)
end

function UiColour(section,colour)
    if section == "Huge" then
        SSOL_UI["b"]["BackgroundColor3"] = colour;
    elseif section == "Titanic" then
        SSOL_UI["7"]["BackgroundColor3"] = colour;
    end
end

function ChangeText(section,text)
    if section == "Roll" then
        SSOL_UI["4"]["Text"] = "Current Rolls: " .. text;
    elseif section == "Time" then
        SSOL_UI["6"]["Text"] = "Run Time: " .. text;
    elseif section == "Coins" then
        SSOL_UI["8"]["Text"] = "RNG Coins: " .. text;
    elseif section == "Mastery" then
        SSOL_UI["a"]["Text"] = "Mastery Level: " .. text;
    elseif section == "Huge" then
        SSOL_UI["c"]["Text"] = "Huges Hatched: " .. text;
    elseif section == "Dice" then
        SSOL_UI["e"]["Text"] = "Mega Dice II Used: " .. text;
    end
end

function Stopwatch()
    local CurrentTime = os.time();
    local ElapsedTime = CurrentTime - StartTime;
    ChangeText("Time",FormatTime(ElapsedTime));
    task.wait(1);
end

function boost()
    if tostring(require(ReplicatedStorage.Library.Client.Save).Get()["RngRolls"]):sub(-1) == "8" then return true else return false end
end

if Settings.Misc.AntiAfk then
    game.Players.LocalPlayer.PlayerScripts.Scripts.Core["Idle Tracking"].Enabled = false
    local vu = game:GetService("VirtualUser")
    game:GetService('Players').LocalPlayer.Idled:connect(function()
        vu:Button2Down(Vector2.new(0,0),Workspace.CurrentCamera.CFrame)
        task.wait(1)
        vu:Button2Up(Vector2.new(0,0),Workspace.CurrentCamera.CFrame)
    end)
    local old 
    old = hookmetamethod(game,"__namecall",(function(...) 
        local self,arg = ...
        if not checkcaller() then 
            if tostring(self) == "__BLUNDER" or tostring(self) == "Idle Tracking: Update Timer" or tostring(self) == "Move Server" then return end
        end
        return old(...)
    end))
    game.ReplicatedStorage.Network["Idle Tracking: Stop Timer"]:FireServer()
end

RunService.RenderStepped:Connect(function()
	ChangeText("Roll",game:GetService("Players").LocalPlayer.leaderstats["\240\159\142\178 Rolls"].Value)
local function UpdateDiceCount()
    local diceCount = GetKey("Mega Lucky Dice II")
    ChangeText("Dice", diceCount)
end

RunService.RenderStepped:Connect(function()
    UpdateDiceCount()
end)
    ChangeText("Coins",game:GetService("Players").LocalPlayer.PlayerGui.MainLeft.Left.Currency.RngCoins["RNG Coins"].Amount.Text)
    ChangeText("Mastery",require(game.ReplicatedStorage.Library.Client.MasteryCmds).GetLevel("Economy"))
    Stopwatch()
    if not Settings.UiEnabled then
        game:GetService("Players").LocalPlayer.PlayerGui.SSol.Enabled = false
    end
end)

RunService.RenderStepped:Connect(function()
	if Settings.Roll.Enable then
        local args = {
            [1] = "First"
        }
        game:GetService("ReplicatedStorage").Network.Rng_Roll:InvokeServer(unpack(args))
    end
    if Settings.Roll.Invisible then task.wait()
        for i,v in pairs(Workspace.Camera:GetChildren()) do
            if v.ClassName == "Part" or v.ClassName == "Model" then
                v:Destroy()
            end
        end
    end
    task.wait()
end)

RunService.RenderStepped:Connect(function()
	if Settings.Upgrades.EggLuck then
        local args = {
            [1] = "First",
            [2] = "RNGEggLuck"
        }
        game:GetService("ReplicatedStorage").Network.Rng_PurchaseUpgrade:InvokeServer(unpack(args))
    end
    if Settings.Upgrades.HatchSpeed then
        local args = {
            [1] = "First",
            [2] = "RNGHatchSpeed"
        }
        game:GetService("ReplicatedStorage").Network.Rng_PurchaseUpgrade:InvokeServer(unpack(args))
    end
    if Settings.Upgrades.BonusLuck then
        local args = {
            [1] = "First",
            [2] = "RNGBonusLuck"
        }
        game:GetService("ReplicatedStorage").Network.Rng_PurchaseUpgrade:InvokeServer(unpack(args))
    end
    if Settings.Upgrades.HugeLuck then
        local args = {
            [1] = "First",
            [2] = "RNGHugeLuck"
        }
        game:GetService("ReplicatedStorage").Network.Rng_PurchaseUpgrade:InvokeServer(unpack(args))
    end
    if Settings.Upgrades.ExtraEgg then
        local args = {
            [1] = "First",
            [2] = "RNGExtraEgg"
        }
        game:GetService("ReplicatedStorage").Network.Rng_PurchaseUpgrade:InvokeServer(unpack(args))
    end

    local diceSettings3 = Settings.Dice["Lucky Dice"]
    if Settings.AutoBuyDice then
        for i = 1, 6 do
            Network:WaitForChild("Merchant_RequestPurchase"):InvokeServer("LuckyDiceMerchant", i)
        end
    end
    if diceSettings3.Use then
        local shouldUse = true
        if diceSettings3.Roll_On_Boost and not boost() then
            shouldUse = false
        end
        if diceSettings3.Only_Use_If_Not_Active then
            local isActive = require(ReplicatedStorage.Library.Client.BuffCmds).IsActive("Lucky Dice")
            shouldUse = not isActive
        end
        if shouldUse then
            Network:WaitForChild("LuckyDice_Consume"):InvokeServer(1)
        end
    end
    if diceSettings3.Craft then
        for i = 1, 6 do
            Network:WaitForChild("Merchant_RequestPurchase"):InvokeServer("LuckyDiceMerchant", i)
        end
    end

    local diceSettings2 = Settings.Dice["Lucky Dice II"]
    if diceSettings2.Use then
        local shouldUse = true
        if diceSettings2.Roll_On_Boost and not boost() then
            shouldUse = false
        end
        if diceSettings2.Only_Use_If_Not_Active then
            local isActive = require(ReplicatedStorage.Library.Client.BuffCmds).IsActive("Lucky Dice II")
            shouldUse = not isActive
        end
        if shouldUse then
            Network:WaitForChild("LuckyDiceII_Consume"):InvokeServer(1)
        end
    end
    if diceSettings2.Craft then
        Network:WaitForChild("LuckyDice_Craft"):InvokeServer("Lucky Dice II", 1)
    end

    local diceSettings1 = Settings.Dice["Lucky Dice III"]
    if diceSettings1.Use then
        local shouldUse = true
        if diceSettings1.Roll_On_Boost and not boost() then
            shouldUse = false
        end
        if diceSettings1.Only_Use_If_Not_Active then
            local isActive = require(ReplicatedStorage.Library.Client.BuffCmds).IsActive("Lucky Dice III")
            shouldUse = not isActive
        end
        if shouldUse then
            Network:WaitForChild("LuckyDiceIII_Consume"):InvokeServer(1)
        end
    end
    if diceSettings1.Craft then
        task.wait(40)
        Network:WaitForChild("LuckyDice_Craft"):InvokeServer("Lucky Dice III", 1)
    end
    local diceSettings = Settings.Dice["Mega Lucky Dice"]
    if diceSettings.Use then
        local shouldUse = true
        if diceSettings.Roll_On_Boost and not boost() then
            shouldUse = false
        end
        if diceSettings.Only_Use_If_Not_Active then
            local isActive = require(ReplicatedStorage.Library.Client.BuffCmds).IsActive("Mega Lucky Dice")
            shouldUse = not isActive
        end
        if shouldUse then
            Network:WaitForChild("LuckyDice_ConsumeMega"):InvokeServer(1)
        end
    end
    if diceSettings.Craft then
function GetKey(keyName)
    for i, v in pairs(require(game.ReplicatedStorage.Library.Client.Save).Get().Inventory.Misc) do
        if v.id == keyName then
            return v._am or 0
        end
    end
    return 0
end

if GetKey("Lucky Dice II") >= 30 then
    wait(2)

    local argsMegaLucky = {
        [1] = "Mega Lucky Dice",
        [2] = 1
    }

    for i = 1, 15 do
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_Craft"):InvokeServer(unpack(argsMegaLucky))
    end

    if GetKey("Lucky Dice II") <= 29 then
else
        local argsLuckyDiceIII = {
            [1] = "Lucky Dice III",
            [2] = 1
        }

        for i = 1, 15 do
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_Craft"):InvokeServer(unpack(argsLuckyDiceIII))
        end
    end
end

    local diceSettings4 = Settings.Dice["Mega Lucky Dice II"]
    local function consumeMegaLuckyDice()
        if GetKey("Mega Lucky Dice II") > 0 then
            local args = {
                [1] = "Mega Lucky Dice II",
                [2] = 1
            }
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_ConsumeMega"):InvokeServer(unpack(args))
            useddice = useddice + 1
            task.wait(1)
        end
    end
    if diceSettings4.Use and not diceSettings4.Only_Use_If_Not_Active and not diceSettings4.Roll_On_Boost then
        consumeMegaLuckyDice()
    elseif diceSettings.Roll_On_Boost and boost() then
        consumeMegaLuckyDice()
    elseif diceSettings4.Only_Use_If_Not_Active then
        local isActive = require(ReplicatedStorage.Library.Client.BuffCmds).IsActive("Mega Lucky Dice II")
        if not isActive then
            consumeMegaLuckyDice()
        end
    end
    if diceSettings4.Craft then
        Network:WaitForChild("LuckyDice_Craft"):InvokeServer("Mega Lucky Dice II", 1)
    end
    task.wait()
end)
while true do
    local args = {
        [1] = "Mega Lucky Dice II",
        [2] = 1
    }

    game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("LuckyDice_ConsumeMega"):InvokeServer(unpack(args))
    
    wait(5)
end
